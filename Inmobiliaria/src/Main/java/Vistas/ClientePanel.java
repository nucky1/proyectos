/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Controllers.ClienteController;
import Modelo.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Usuario1
 */
public class ClientePanel extends javax.swing.JPanel implements ClienteView{
    private DefaultTableModel tabla;
    private HashMap<Integer,Cliente> mapC =null;
    private HashMap<Integer,Asesor> mapA=null;
    private HashMap<Integer,Inmueble> mapI=null;
    private int pos; 
    private Cliente clienteSelec=null; 
    private boolean edit = false;
    //Reglas De composicion    
    private ClienteController mClienteController = new ClienteController(this);
    
    public ClientePanel() {
        initComponents();
        //------Style css
        jPanel3.setBorder(StyleCSS.getBordePanel("Seleccione un Cliente (si no ingresar nuevo) "));
        jPanel4.setBorder(StyleCSS.getBordePanel("INMUEBLES QUE ALQUILA"));
        jPanel5.setBorder(StyleCSS.getBordePanel("INMUEBLES DEL PROPIETARIO"));
        StyleCSS.setPlaceHolder(fieldNombre, "Juanito Mignari");
        StyleCSS.setPlaceHolder(fieldDoc, "40597999");
        StyleCSS.setPlaceHolder(fieldContacto, "Contacto (FB,INSTA)");
        StyleCSS.setPlaceHolder(fieldTel, "2664880282");
        //-----------
        mClienteController.llenarTabla("");
        mClienteController.llenarComboBox(); 
    } 
    private String controlCampos() { 
        String error = ""; 
        if ( fieldNombre.getText().isEmpty()) {
            error = error+ "-El nombre ingresado no es valido\n";  
        }  
        try {
            Integer.parseInt(this.fieldDoc.getText());
        } catch (NumberFormatException e) {
            error = error+ "-El dni ingresado no es valido\n"; 
        }
        try {
            Long.parseLong(this.fieldTel.getText());
        } catch (NumberFormatException e) {
            error = error+ "-El telefono ingresado no es valido.\n"; 
        } 
        if(comboAsesores.getSelectedIndex()==-1){
            error = error+ "-Debe seleccionar el asesor que contactó el cliente.\n"; 
        }
        return error;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        fieldNombre = new javax.swing.JTextField();
        fieldContacto = new javax.swing.JTextField();
        radioCUIT = new javax.swing.JRadioButton();
        radioDNI = new javax.swing.JRadioButton();
        fieldDoc = new javax.swing.JTextField();
        fieldTel = new javax.swing.JTextField();
        botonEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        jBuscarPorNom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        botonGuardarCambios = new javax.swing.JButton();
        botonEditar = new javax.swing.JButton();
        jRadioID = new javax.swing.JRadioButton();
        jRadioNombre = new javax.swing.JRadioButton();
        botonAlta = new javax.swing.JButton();
        comboAsesores = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaInmuebleAlquila = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        botonAltaInmueble = new javax.swing.JButton();
        botonModifInmueble = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInmuebleDueño = new javax.swing.JTable();
        botonEliminarInmueble = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setLayout(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(null);
        jPanel3.add(fieldNombre);
        fieldNombre.setBounds(180, 270, 220, 30);
        jPanel3.add(fieldContacto);
        fieldContacto.setBounds(180, 440, 220, 30);

        radioCUIT.setText("CUIT");
        jPanel3.add(radioCUIT);
        radioCUIT.setBounds(300, 310, 100, 30);

        radioDNI.setText("DNI");
        jPanel3.add(radioDNI);
        radioDNI.setBounds(180, 310, 100, 30);
        jPanel3.add(fieldDoc);
        fieldDoc.setBounds(180, 360, 220, 30);
        jPanel3.add(fieldTel);
        fieldTel.setBounds(180, 400, 220, 30);

        botonEliminar.setBackground(new java.awt.Color(255, 255, 255));
        botonEliminar.setText("Eliminar");
        botonEliminar.setEnabled(false);
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        jPanel3.add(botonEliminar);
        botonEliminar.setBounds(280, 560, 120, 40);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Cliente captado por:");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(30, 230, 140, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Documento :");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(30, 360, 140, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Telefono :");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(30, 400, 140, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Contacto :");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(30, 440, 140, 30);

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "CUIT/DNI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaClientes);

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(20, 120, 400, 90);

        jBuscarPorNom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 100, 0)));
        jBuscarPorNom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jBuscarPorNomKeyReleased(evt);
            }
        });
        jPanel3.add(jBuscarPorNom);
        jBuscarPorNom.setBounds(20, 70, 400, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tipo Documento :");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(30, 310, 140, 30);

        botonGuardarCambios.setBackground(new java.awt.Color(255, 255, 255));
        botonGuardarCambios.setText("Guardar Cambios");
        botonGuardarCambios.setEnabled(false);
        botonGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarCambiosActionPerformed(evt);
            }
        });
        jPanel3.add(botonGuardarCambios);
        botonGuardarCambios.setBounds(20, 485, 380, 40);

        botonEditar.setBackground(new java.awt.Color(255, 160, 0));
        botonEditar.setText("Editar");
        botonEditar.setEnabled(false);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        jPanel3.add(botonEditar);
        botonEditar.setBounds(150, 560, 120, 40);

        buttonGroup1.add(jRadioID);
        jRadioID.setText("Buscar Por ID");
        jPanel3.add(jRadioID);
        jRadioID.setBounds(230, 30, 190, 30);

        buttonGroup1.add(jRadioNombre);
        jRadioNombre.setSelected(true);
        jRadioNombre.setText("Buscar Por Nombre");
        jRadioNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 100, 0)));
        jPanel3.add(jRadioNombre);
        jRadioNombre.setBounds(20, 30, 190, 30);

        botonAlta.setBackground(new java.awt.Color(255, 160, 0));
        botonAlta.setText("Nuevo Cliente");
        botonAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAltaActionPerformed(evt);
            }
        });
        jPanel3.add(botonAlta);
        botonAlta.setBounds(20, 560, 120, 40);

        jPanel3.add(comboAsesores);
        comboAsesores.setBounds(180, 230, 220, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Nombre y Apellido : ");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(30, 270, 140, 30);
        jPanel3.add(jSeparator1);
        jSeparator1.setBounds(20, 540, 380, 10);
        jPanel3.add(jSeparator2);
        jSeparator2.setBounds(20, 220, 400, 10);

        add(jPanel3);
        jPanel3.setBounds(10, 10, 440, 620);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(null);

        tablaInmuebleAlquila.setBackground(new java.awt.Color(255, 200, 100));
        tablaInmuebleAlquila.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tablaInmuebleAlquila.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Direccion", "Zona", "Precio", "Tipo de Inmueble", "Estado", "Habitaciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInmuebleAlquila.setAutoscrolls(false);
        jScrollPane2.setViewportView(tablaInmuebleAlquila);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(10, 30, 770, 210);

        add(jPanel4);
        jPanel4.setBounds(460, 10, 790, 270);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(null);

        jButton8.setText("Hacer Contrato administracion");
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton8);
        jButton8.setBounds(590, 280, 180, 40);

        botonAltaInmueble.setBackground(new java.awt.Color(255, 160, 0));
        botonAltaInmueble.setText("Agregar Inmueble");
        botonAltaInmueble.setEnabled(false);
        botonAltaInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAltaInmuebleActionPerformed(evt);
            }
        });
        jPanel5.add(botonAltaInmueble);
        botonAltaInmueble.setBounds(20, 280, 130, 40);

        botonModifInmueble.setBackground(new java.awt.Color(255, 255, 255));
        botonModifInmueble.setText("Editar Imueble");
        botonModifInmueble.setEnabled(false);
        botonModifInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModifInmuebleActionPerformed(evt);
            }
        });
        jPanel5.add(botonModifInmueble);
        botonModifInmueble.setBounds(190, 280, 130, 40);

        tablaInmuebleDueño.setBackground(new java.awt.Color(255, 200, 100));
        tablaInmuebleDueño.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tablaInmuebleDueño.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Direccion", "Zona", "Precio", "Tipo de Inmueble", "Operacion", "Estado", "Habitaciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInmuebleDueño.setAutoscrolls(false);
        tablaInmuebleDueño.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInmuebleDueñoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInmuebleDueño);

        jPanel5.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 770, 210);

        botonEliminarInmueble.setBackground(new java.awt.Color(255, 255, 255));
        botonEliminarInmueble.setText("Eliminar Imueble");
        botonEliminarInmueble.setEnabled(false);
        botonEliminarInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarInmuebleActionPerformed(evt);
            }
        });
        jPanel5.add(botonEliminarInmueble);
        botonEliminarInmueble.setBounds(370, 280, 130, 40);

        add(jPanel5);
        jPanel5.setBounds(460, 290, 790, 340);
    }// </editor-fold>//GEN-END:initComponents

    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        clienteSelec = mapC.get(this.tablaClientes.getValueAt(tablaClientes.getSelectedRow(), 0));
        //Cargar datos
        this.fieldNombre.setText(clienteSelec.getNombre());
        this.fieldContacto.setText(clienteSelec.getContacto());
        this.fieldDoc.setText(Integer.toString(clienteSelec.getDocumento()));
        this.fieldTel.setText(Long.toString(clienteSelec.getTel())); 
        comboAsesores.setSelectedItem(clienteSelec.getAsesorID()+"-"+mapA.get(clienteSelec.getAsesorID()).getNombre());
        clienteSelec.getId();
        mClienteController.llenarTablaInmuebles(clienteSelec.getId());
        //Bloquear y activar botones necesarios
        this.radioDNI.setSelected(true);
        this.radioDNI.setEnabled(false);
        this.radioCUIT.setEnabled(false);
        this.fieldNombre.setEditable(false);
        this.fieldContacto.setEditable(false);
        this.fieldDoc.setEditable(false);
        this.fieldTel.setEditable(false);
        botonGuardarCambios.setEnabled(false); 
        botonEditar.setEnabled(true);
        botonEliminar.setEnabled(true);
        botonAltaInmueble.setEnabled(true);
        comboAsesores.setEnabled(false);
    }//GEN-LAST:event_tablaClientesMouseClicked

    private void jBuscarPorNomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBuscarPorNomKeyReleased
        if(jRadioNombre.isSelected()){
            mClienteController.llenarTabla(jBuscarPorNom.getText());
        }else{
            
        }
    }//GEN-LAST:event_jBuscarPorNomKeyReleased

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        CambiarCampos(true);
        this.fieldNombre.setText("");
        this.fieldContacto.setText("");
        this.fieldDoc.setText("");
        this.fieldTel.setText(""); 
        mClienteController.deleteCliente(clienteSelec.getId());
        
    }//GEN-LAST:event_botonEliminarActionPerformed
    
    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        CambiarCampos(true);
        edit = true;
        /*
        this.radioDNI.setSelected(true);
        this.radioDNI.setEnabled(true);
        this.radioCUIT.setEnabled(true);
        this.fieldNombre.setEditable(true);
        this.fieldContacto.setEditable(true);
        this.fieldDoc.setEditable(true);
        this.fieldTel.setEditable(true);
        botonAltaC.setEnabled(true);
        edit = false;
        //No se si se puede cambiar de asesor
        //comboAsesores.setEnabled(true);
        */
    }//GEN-LAST:event_botonEditarActionPerformed

    private void botonGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarCambiosActionPerformed
        if (controlCampos().isEmpty()) {
            int tipoDoc;
            System.out.println();
            int asesorID = mapA.get(this.comboAsesores.getSelectedIndex()).getId();
            if (this.radioDNI.isSelected()) {
                tipoDoc = 0;
            } else {
                tipoDoc = 1;
            }
            Cliente nuevo = new Cliente(0, asesorID, fieldNombre.getText(), Integer.parseInt(this.fieldDoc.getText()), tipoDoc, Long.parseLong(this.fieldTel.getText()), fieldContacto.getText());
            if(edit){
                nuevo.setId(clienteSelec.getId());
                mClienteController.modificarCliente(nuevo);
            }else{
                mClienteController.altaCliente(nuevo);
            }
        } else {
            JOptionPane.showMessageDialog(null, controlCampos(), "Error en ingreso de datos", 1);
        }
        this.fieldNombre.setText("");
        this.fieldContacto.setText("");
        this.fieldDoc.setText("");
        this.fieldTel.setText(""); 
        CambiarCampos(false);
        edit = false;
        mClienteController.llenarTabla("");
    }//GEN-LAST:event_botonGuardarCambiosActionPerformed

    private void botonAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAltaActionPerformed
        clienteSelec = null;
        this.fieldNombre.setText("");
        this.fieldContacto.setText("");
        this.fieldDoc.setText("");
        this.fieldTel.setText(""); 
        CambiarCampos(true);
        /*
        this.radioDNI.setSelected(true);
        this.radioDNI.setEnabled(true);
        this.radioCUIT.setEnabled(true);
        this.fieldNombre.setEditable(true);
        this.fieldContacto.setEditable(true);
        this.fieldDoc.setEditable(true);
        this.fieldTel.setEditable(true);
        edit = false;
        botonAltaC.setEnabled(true);
        comboAsesores.setEnabled(true);
        */
    }//GEN-LAST:event_botonAltaActionPerformed

    private void botonAltaInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAltaInmuebleActionPerformed
        if(tablaClientes.getSelectedRow()!=-1 ){
            jDialog1 = new javax.swing.JDialog();
            jDialog1.setSize(1450, 800);
            jDialog1.setResizable(false);
            jDialog1.setUndecorated(true);
            jDialog1.setTitle("Ingresar Inmueble"); 
            jDialog1.setBounds(10, 10, 600, 730);
            jDialog1.setModal(true); 
            int clienteID = clienteSelec.getId();
            Inmueble inmuebleNulo = new Inmueble(-1,clienteID);
            ABMInmueble ai = new ABMInmueble(inmuebleNulo,false);
            jDialog1.add(ai);
            jDialog1.setVisible(true);
            jDialog1.dispose();
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_botonAltaInmuebleActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void botonModifInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModifInmuebleActionPerformed
        if(tablaInmuebleDueño.getSelectedRow()!=-1 ){
            jDialog1 = new javax.swing.JDialog();
            jDialog1.setSize(1450, 800);
            jDialog1.setResizable(false);
            jDialog1.setUndecorated(true);
            jDialog1.setTitle("Ingresar Inmueble"); 
            jDialog1.setBounds(10, 10, 600, 730);
            jDialog1.setModal(true); 
          //  int clienteID = clienteSelec.getId();
            Inmueble inmModific = mapI.get((int) tablaInmuebleDueño.getValueAt(tablaInmuebleDueño.getSelectedRow(), 0));
            ABMInmueble aii = new ABMInmueble(inmModific,false);// Envio FALSE para que no me deshabilite los campos.
            jDialog1.add(aii);
            jDialog1.setVisible(true);
            //Cuando vuelva tenes que refrescar las tablas trallendo desde la BD los inmuebles nuevos 
            // o modificados ... hay que corregir los DAOS de inmueble por que faltan campos en el SELECT 
            jDialog1.dispose();
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar un inmueble", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_botonModifInmuebleActionPerformed

    private void botonEliminarInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarInmuebleActionPerformed
        if(tablaInmuebleDueño.getSelectedRow()!=-1 ){
            int clienteID = clienteSelec.getId();
            int inmuebleID = (int) tablaInmuebleDueño.getValueAt(tablaInmuebleDueño.getSelectedRow(), 0);
            mClienteController.deleteInmueble(inmuebleID);
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar un inmueble", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_botonEliminarInmuebleActionPerformed

    private void tablaInmuebleDueñoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInmuebleDueñoMouseClicked
        botonEliminarInmueble.setEnabled(true);
        botonModifInmueble.setEnabled(true);
    }//GEN-LAST:event_tablaInmuebleDueñoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAlta;
    private javax.swing.JButton botonAltaInmueble;
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonEliminarInmueble;
    private javax.swing.JButton botonGuardarCambios;
    private javax.swing.JButton botonModifInmueble;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboAsesores;
    private javax.swing.JTextField fieldContacto;
    private javax.swing.JTextField fieldDoc;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JTextField fieldTel;
    private javax.swing.JTextField jBuscarPorNom;
    private javax.swing.JButton jButton8;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioID;
    private javax.swing.JRadioButton jRadioNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton radioCUIT;
    private javax.swing.JRadioButton radioDNI;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaInmuebleAlquila;
    private javax.swing.JTable tablaInmuebleDueño;
    // End of variables declaration//GEN-END:variables

    @Override
    public void cargarClientes(ArrayList a) {
        //To change body of generated methods, choose Tools | Templates.
    }
     
    @Override
    public void llenarTablaClientes(ArrayList<Cliente> listaC) { 
        int fila = 0; 
        mapC= new HashMap<>(); 
        tabla = (DefaultTableModel)tablaClientes.getModel();
        tabla.setNumRows(0);
        for(Cliente cl : listaC){
            tabla.addRow(new Object [3]);
            tablaClientes.setValueAt(cl.getId(), fila, 0);
            tablaClientes.setValueAt(cl.getNombre(), fila, 1);
            tablaClientes.setValueAt(cl.getDocumento(), fila, 2);
            mapC.put(cl.getId(),cl);
            fila++;
        }
    }

    @Override
    public void llenarAsesores(ArrayList<Asesor> listaA){ 
        mapA=new HashMap<>();
        int posEnComboBox = 0;
        for(Asesor cl : listaA){
            mapA.put(posEnComboBox, cl);
            this.comboAsesores.addItem(cl.getId()+"-"+cl.getNombre()); 
            posEnComboBox++;
        }
    }
    @Override 
    public void respuestaAltaCliente(boolean exito){
        if(exito){
            JOptionPane.showMessageDialog(null,"El cliente se ha ingresado con exito.");
            // limpiarCampos();
        }else{
            JOptionPane.showMessageDialog(null, "El no ha sido dado de alta.","Ha ocurrido un error", JOptionPane.ERROR_MESSAGE);
        }
    }
    @Override 
    public void respuestaModifCliente(boolean exito){
        if(exito){
            JOptionPane.showMessageDialog(null,"El cliente se ha modificado con exito.");
            // limpiarCampos();
        }else{
            JOptionPane.showMessageDialog(null, "El cliente no se pudo modificar.","Ha ocurrido un error", JOptionPane.ERROR_MESSAGE);
        }
    }
    @Override 
    public void respuestaDeleteCliente(boolean exito){
        if(exito){
            JOptionPane.showMessageDialog(null,"El cliente se ha eliminado con exito.");
            // limpiarCampos();
        }else{
            JOptionPane.showMessageDialog(null, "No se pudo eliminar el cliente.","Ha ocurrido un error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void CambiarCampos(boolean tipe){
        this.radioDNI.setSelected(tipe);
        this.radioDNI.setEnabled(tipe);
        this.radioCUIT.setEnabled(tipe);
        this.fieldNombre.setEditable(tipe);
        this.fieldContacto.setEditable(tipe);
        this.fieldDoc.setEditable(tipe);
        this.fieldTel.setEditable(tipe);
        edit = !tipe;
        botonGuardarCambios.setEnabled(tipe);
        botonEliminar.setEnabled(tipe);
        botonEditar.setEnabled(tipe);
        comboAsesores.setEnabled(tipe);
    }

    @Override
    public void llenarTablaInmuebles(ArrayList<Inmueble> inmueblesDueño, ArrayList<Inmueble> inmueblesAlquilando) {
        int fila = 0; 
        mapI= new HashMap<>(); 
        tabla = (DefaultTableModel)tablaInmuebleDueño.getModel();
        tabla.setNumRows(0);
        for(Inmueble cl : inmueblesDueño){
            tabla.addRow(new Object [3]);
            tablaInmuebleDueño.setValueAt(cl.getId(), fila, 0);
            tablaInmuebleDueño.setValueAt(cl.getDireccion(), fila, 1);
            tablaInmuebleDueño.setValueAt(cl.getBarrio(), fila, 2);
            tablaInmuebleDueño.setValueAt(cl.getPrecio(), fila, 3);
            tablaInmuebleDueño.setValueAt(cl.getTipo(), fila, 4);
            tablaInmuebleDueño.setValueAt(cl.getOperacion(), fila, 5);
            tablaInmuebleDueño.setValueAt(cl.getEstado(), fila, 6);
            tablaInmuebleDueño.setValueAt(cl.getHabitaciones(), fila, 7);
            mapI.put(cl.getId(),cl);
            fila++;
        }
        fila = 0;
        tabla = (DefaultTableModel)tablaInmuebleAlquila.getModel();
        tabla.setNumRows(0);
        for(Inmueble cl : inmueblesAlquilando){
            tabla.addRow(new Object [3]);
            tablaInmuebleAlquila.setValueAt(cl.getId(), fila, 0);
            tablaInmuebleAlquila.setValueAt(cl.getDireccion(), fila, 1);
            tablaInmuebleAlquila.setValueAt(cl.getBarrio(), fila, 2);
            tablaInmuebleAlquila.setValueAt(cl.getPrecio(), fila, 3);
            tablaInmuebleAlquila.setValueAt(cl.getTipo(), fila, 4);
            tablaInmuebleAlquila.setValueAt(cl.getEstado(), fila, 5);
            tablaInmuebleAlquila.setValueAt(cl.getHabitaciones(), fila, 6);
            fila++;
        }
    }

    @Override
    public void respuestaDeleteInmueble(boolean exito) {
        if(exito){
            mapI.remove((int) tablaInmuebleDueño.getValueAt(tablaInmuebleDueño.getSelectedRow(), 0));
            tabla = (DefaultTableModel)tablaInmuebleDueño.getModel();
            tabla.setNumRows(0);
            int fila = 0; 
            ArrayList<Inmueble> inmueblesDueño = new ArrayList(mapI.values());
            for(Inmueble cl : inmueblesDueño){
                tabla.addRow(new Object [3]);
                tablaInmuebleDueño.setValueAt(cl.getId(), fila, 0);
                tablaInmuebleDueño.setValueAt(cl.getDireccion(), fila, 1);
                tablaInmuebleDueño.setValueAt(cl.getBarrio(), fila, 2);
                tablaInmuebleDueño.setValueAt(cl.getPrecio(), fila, 3);
                tablaInmuebleDueño.setValueAt(cl.getTipo(), fila, 4);
                tablaInmuebleDueño.setValueAt(cl.getOperacion(), fila, 5);
                tablaInmuebleDueño.setValueAt(cl.getEstado(), fila, 6);
                tablaInmuebleDueño.setValueAt(cl.getHabitaciones(), fila, 7);
                fila++;
            }
            JOptionPane.showMessageDialog(null,"El Inmueble se ha eliminado con exito.");
            // limpiarCampos();
        }else{
            JOptionPane.showMessageDialog(null, "No se pudo eliminar el Inmueble.","Ha ocurrido un error", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void cargarDatosClientes(Cliente cte) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
